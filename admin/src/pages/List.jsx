import axios from 'axios'
import React, { useEffect, useState } from 'react'
import { backendUrl } from '../App'
import { toast } from 'react-toastify'
import EditProduct from '../components/EditProduct'

// --- 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pop-up ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô (‡∏ß‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡∏™‡∏∏‡∏î) ---
const ConfirmationDialog = ({ message, onConfirm, onCancel }) => {
  return (
    <div className='fixed inset-0 flex items-center justify-center bg-black/50 z-50'>
      <div className='bg-white p-6 rounded-md shadow-lg text-center'>
        <p className='mb-4 text-lg'>{message}</p>
        <div className='flex justify-center gap-4'>
          <button onClick={onCancel} className='px-4 py-2 bg-gray-300 rounded hover:bg-gray-400'>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
          <button onClick={onConfirm} className='px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700'>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö</button>
        </div>
      </div>
    </div>
  );
};


const List = ({ token }) => {

  const [list, setList] = useState([])
  const [openEdit, setOpenEdit] = useState(false)
  const [selectedProduct, setSelectedProduct] = useState(null);

  // --- 2. ‡πÄ‡∏û‡∏¥‡πà‡∏° State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Pop-up ---
  const [showConfirm, setShowConfirm] = useState(false);
  const [productToDelete, setProductToDelete] = useState(null);

  const fetchList = async () => {
    try {
      const response = await axios.get(backendUrl + '/api/product/list/all', { headers: { Authorization: `Bearer ${token}` } });
      setList(response.data);
    } catch (error) {
      console.log(error);
      toast.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ");
    }
  }

  const removeProduct = async (productId) => {
    try {
      const response = await axios.post(
        backendUrl + '/api/product/remove',
        { id: productId },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      if (response.status === 200) {
        toast.success("‡∏ã‡πà‡∏≠‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        await fetchList();
      } else {
        toast.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
      }
    } catch (error) {
      console.log(error);
      toast.error(error.message);
    }
  }

  const restoreProduct = async (productId) => {
    try {
      const response = await axios.post(
        backendUrl + '/api/product/restore',
        { id: productId },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      if (response.status === 200) {
        toast.success("‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        await fetchList();
      } else {
        toast.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô");
      }
    } catch (error) {
      toast.error(error.message);
    }
  }

  // --- 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Hard Delete ---
  const handleHardDelete = async () => {
    if (!productToDelete) return;
    try {
      const response = await axios.post(
        backendUrl + '/api/product/hard-delete',
        { id: productToDelete },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      if (response.status === 200) {
        toast.success("‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏≤‡∏ß‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        await fetchList();
      } else {
        toast.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
      }
    } catch (error) {
      toast.error(error.message);
    } finally {
      // ‡∏õ‡∏¥‡∏î Pop-up ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      setShowConfirm(false);
      setProductToDelete(null);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î Pop-up
  const confirmHardDelete = (productId) => {
    setProductToDelete(productId);
    setShowConfirm(true);
  };

  useEffect(() => {
    if (token) {
      fetchList();
    }
  }, [token])

  return (
    <>
      {/* --- 4. ‡πÅ‡∏™‡∏î‡∏á Pop-up ‡πÄ‡∏°‡∏∑‡πà‡∏≠ showConfirm ‡πÄ‡∏õ‡πá‡∏ô true --- */}
      {showConfirm && (
        <ConfirmationDialog
          message={`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏≤‡∏ß‡∏£? ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ`}
          onConfirm={handleHardDelete}
          onCancel={() => setShowConfirm(false)}
        />
      )}

      <p className='mb-2'>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {list.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
      <div className='flex flex-col gap-2'>

        <div className='hidden md:grid grid-cols-[1fr_3fr_1fr_1fr_1fr_1fr_1fr] items-center py-1 px-2 border border-gray-300 bg-gray-100 text-sm'>
          <b>‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</b>
          <b>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</b>
          <b className='text-center'>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</b>
          <b className='text-center'>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå</b>
          <b className='text-center'>‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)</b>
          <b className='text-center'>‡∏™‡∏ï‡πá‡∏≠‡∏Å (‡∏ä‡∏¥‡πâ‡∏ô)</b> {/* <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á "‡∏™‡∏ï‡πá‡∏≠‡∏Å" */}
          <b className='text-center'>‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥</b>
        </div>
        {
          list.map((item) => (
            <div
              className={`grid grid-cols-[1fr_3fr_1fr] md:grid-cols-[1fr_3fr_1fr_1fr_1fr_1fr_1fr] items-center gap-2 py-1 px-2 border border-gray-300 text-sm ${!item.is_active ? 'bg-gray-200 text-gray-500' : ''}`}
              key={item.id}
            >
              <img className={`w-12 h-12 object-cover ${!item.is_active ? 'opacity-50' : ''}`} src={item.image_url} alt={item.name} />
              <p>{item.name}</p>
              <p className='text-center'> {item.Categories && item.Categories.length > 0 ? item.Categories.map(cat => cat.name).join(', ') : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'}</p>
              <p className='text-center'>{item.ProductType.name}</p>
              <p className='text-center'>{item.price}</p>
              <p className='text-center'>{item.stock_quantity}</p>

              <div className='flex justify-center items-center gap-4'>
                <p onClick={() => { setSelectedProduct(item); setOpenEdit(true); }} className='cursor-pointer text-lg text-amber-600'>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</p>

                {/* --- 5. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏õ‡∏∏‡πà‡∏° --- */}
                {item.is_active ? (
                  <p onClick={() => removeProduct(item.id)} className='cursor-pointer text-lg text-red-600'>‡∏õ‡∏¥‡∏î</p>
                ) : (
                  <>
                    <p onClick={() => restoreProduct(item.id)} className='cursor-pointer text-lg text-green-600'>‡πÄ‡∏õ‡∏¥‡∏î</p>
                    <p onClick={() => confirmHardDelete(item.id)} className='cursor-pointer text-xl text-gray-400 hover:text-red-700' title='‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£'>üóëÔ∏è</p>
                  </>
                )}
              </div>
            </div>
          ))
        }
      </div>

      <EditProduct open={openEdit} onClose={() => setOpenEdit(false)} product={selectedProduct} fetchList={fetchList} token={token} />
    </>
  )
}

export default List